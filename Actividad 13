/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package actividad13;

/**
 *
 * @author work pc
 */

import com.sun.tools.javac.Main;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;


public class Actividad13 {

    /**
     * @param args the command line arguments
     */
    
    public static List<String> listado = new ArrayList<>();
    
    public static void main(String[] args) {
        // TODO code application logic here
        
        listado.add("Amarillo");
        listado.add("Verde");
        listado.add("Azul");
        listado.add("Cafe");
        listado.add("Naranja");
        listado.add("Morado");
        listado.add("Rojo");
        listado.add("Salmon");
        listado.add("Plateado");
        listado.add("Negro");
        listado.add("Rosado");
        
        
         System.out.println("Lista desordenada:" + listado);
           listado.sort(Comparator.comparingInt(String::length));
       System.out.println();///Este lo puse solo para salto de linea, no tiene nada que ver con el codigo
       System.out.println();///Este lo puse solo para salto de linea, no tiene nada que ver con el codigo
           
    System.out.println("Orden de longitud con lamda: " +listado);  
    listado.sort((String p1 ,String p2) -> p1.compareTo(p2));
    System.out.println("Orden alfabetico con lamda :" +listado);
    listado.sort((L1, L2) -> {
            byte result;
            if (L1.length() > L2.length()) {
                result = 1;
            } else if (L1.length() < L2.length()) {
                result = -1;
            } else {
                result = 0;
            }

            return 0;   
    });
    
       System.out.println();///Este lo puse solo para salto de linea, no tiene nada que ver con el codigo
       System.out.println("Orden alfabetico con metodo de referencia" + listado);
        listado.sort(Comparator.comparingInt(String::length));
  
        System.out.println("Orden de longitud con metodo de referencia"+ listado);
        listado.sort(String::compareTo);
       System.out.println();///Este lo puse solo para salto de linea, no tiene nada que ver con el codigo
        
     
        
    interface AnonClass{
        public void Long(List<String> listado);
        public void Alf(List<String>listado);
    }
         AnonClass anon = new AnonClass(){
            public void Long(List<String> listado){
                listado.sort((String L1, String L2) -> {
                int result;
                if (L1.length()>L2.length()){
                    result = 1;
                } else if (L1.length()<L2.length()){
                    result = -1;
                } else {
                    result = 0;
                }
                return result;
                });
            }
            public void Alf(List<String>listado){
                listado.sort((String s1, String s2) -> s1.compareTo(s2));
            }    
         };     
        anon.Long(listado);
           System.out.println("Orden de Longitud con clase anonima: " + listado);
           

         anon.Alf(listado);
           System.out.println("Orden Alfabetico con clase anonima: " + listado);
        }

    
    }
